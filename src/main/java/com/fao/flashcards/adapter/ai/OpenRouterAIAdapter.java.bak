package com.fao.flashcards.adapter.ai;

import com.fao.flashcards.domain.port.AICardGenerationPort;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.ai.chat.ChatClient;
import org.springframework.ai.chat.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.chat.prompt.SystemPromptTemplate;
import org.springframework.ai.chat.prompt.UserPromptTemplate;
import org.springframework.ai.openai.OpenAiChatOptions;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Adapter für die Kommunikation mit der OpenRouter.ai API über Spring AI.
 * Implementiert den AICardGenerationPort und verwendet den ChatClient für die Kommunikation.
 */
// Diese Klasse ist deaktiviert, da sie Spring AI verwendet, das nicht verfügbar ist
// Stattdessen wird DirectOpenRouterAIAdapter verwendet
//@Component
public class OpenRouterAIAdapter /* implements AICardGenerationPort */ {
    
    private final ChatClient chatClient;
    private final ObjectMapper objectMapper;
    
    @Value("${ai.model}")
    private String aiModel;
    
    /**
     * Konstruktor für den OpenRouterAIAdapter.
     * 
     * @param chatClient Der zu verwendende ChatClient
     */
    public OpenRouterAIAdapter(ChatClient chatClient) {
        this.chatClient = chatClient;
        this.objectMapper = new ObjectMapper();
    }
    
    @Override
    public List<GeneratedCard> generateCardsFromText(String contentText, String prompt, Integer numberOfCards) {
        // Systemanweisung für das KI-Modell
        String systemPromptText = """
            Du bist ein Assistent, der Karteikarten für Lernzwecke erstellt.
            Erstelle Karteikarten mit einer Vorderseite (Frage/Konzept) und einer Rückseite (Antwort/Erklärung).
            Die Karteikarten sollten die wichtigsten Konzepte und Informationen aus dem bereitgestellten Text abdecken.
            Formatiere die Ausgabe als JSON-Array mit Objekten, die "front" und "back" Eigenschaften haben.
            Beispiel: [{"front": "Was ist X?", "back": "X ist Y."}, {"front": "Wie funktioniert Z?", "back": "Z funktioniert durch..."}]
            """;
        
        // Benutzeranweisung mit dem Inhalt und den Hinweisen
        String userPromptText = """
            Erstelle Karteikarten basierend auf folgendem Text:
            
            {contentText}
            
            Zusätzliche Hinweise: {prompt}
            
            {numberOfCardsText}
            """;
        
        Map<String, Object> variables = new HashMap<>();
        variables.put("contentText", contentText);
        variables.put("prompt", prompt);
        variables.put("numberOfCardsText", numberOfCards != null ? "Erstelle genau " + numberOfCards + " Karteikarten." : "");
        
        SystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemPromptText);
        UserPromptTemplate userPromptTemplate = new UserPromptTemplate(userPromptText, variables);
        
        Prompt aiPrompt = new Prompt(List.of(systemPromptTemplate.createMessage(), userPromptTemplate.createMessage()));
        
        // Optionen für das KI-Modell setzen
        OpenAiChatOptions options = OpenAiChatOptions.builder()
                .withModel(aiModel)
                .withTemperature(0.7f)
                .build();
        
        // Anfrage an die KI senden
        ChatResponse response = chatClient.call(aiPrompt, options);
        
        // Antwort parsen und Karteikarten erstellen
        String responseContent = response.getResult().getOutput().getContent();
        
        return parseGeneratedCards(responseContent);
    }
    
    /**
     * Parst die JSON-Antwort der KI und erstellt daraus GeneratedCard-Objekte.
     * 
     * @param jsonContent Die JSON-Antwort der KI
     * @return Eine Liste von GeneratedCard-Objekten
     */
    private List<GeneratedCard> parseGeneratedCards(String jsonContent) {
        List<GeneratedCard> generatedCards = new ArrayList<>();
        
        try {
            // Versuche, die Antwort als JSON-Array zu parsen
            JsonNode cardsArray = objectMapper.readTree(jsonContent);
            
            if (cardsArray.isArray()) {
                for (JsonNode cardNode : cardsArray) {
                    if (cardNode.has("front") && cardNode.has("back")) {
                        String front = cardNode.get("front").asText();
                        String back = cardNode.get("back").asText();
                        generatedCards.add(new GeneratedCard(front, back));
                    }
                }
            }
        } catch (JsonProcessingException e) {
            // Wenn das Parsen fehlschlägt, versuche, die Antwort als Text zu interpretieren
            // und extrahiere die Karteikarten manuell
            String[] lines = jsonContent.split("\n");
            GeneratedCard currentCard = null;
            
            for (String line : lines) {
                line = line.trim();
                
                if (line.startsWith("Vorderseite:") || line.startsWith("Front:")) {
                    if (currentCard != null && currentCard.getFront() != null && currentCard.getBack() != null) {
                        generatedCards.add(currentCard);
                    }
                    currentCard = new GeneratedCard();
                    currentCard.setFront(line.substring(line.indexOf(":") + 1).trim());
                } else if (line.startsWith("Rückseite:") || line.startsWith("Back:")) {
                    if (currentCard != null) {
                        currentCard.setBack(line.substring(line.indexOf(":") + 1).trim());
                    }
                }
            }
            
            // Füge die letzte Karteikarte hinzu, wenn sie vollständig ist
            if (currentCard != null && currentCard.getFront() != null && currentCard.getBack() != null) {
                generatedCards.add(currentCard);
            }
        }
        
        return generatedCards;
    }
}